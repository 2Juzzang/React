{"ast":null,"code":"//초기값\nconst initailState = {\n  list: []\n}; //액션\n\nconst CREATE = \"post/CREATE\";\nconst LOAD = \"post/LOAD\";\nconst DELETE = \"post/DELETE\";\nconst EDIT = \"post/EDIT\"; //액션크리에이터\n\nexport function createPost(post) {\n  return {\n    type: CREATE,\n    post\n  };\n}\nexport function loadPost(post) {\n  return {\n    type: LOAD,\n    post\n  };\n}\nexport function deletePost(id) {\n  return {\n    type: DELETE,\n    id\n  };\n}\nexport function editPost(post) {\n  return {\n    type: EDIT,\n    post\n  };\n} //리듀서\n\nexport default function reducer(state = initailState, action = {}) {\n  switch (action.type) {\n    case \"post/CREATE\":\n      {\n        return {\n          list: [...state.list, action.post]\n        };\n      }\n\n    case \"post/LOAD\":\n      {\n        return {\n          list: [action.post]\n        };\n      }\n\n    case \"post/DELETE\":\n      {\n        //   let idx = state.list.findIndex((d) => d.id === action.post);\n        console.log(\"하\", action);\n        const arr = state.list.filter(d => d.id !== action.id);\n        return {\n          list: arr\n        };\n      }\n\n    case \"post/EDIT\":\n      {\n        console.log(\"수정하기\", state);\n        state.list.map(item => {\n          // map으로 돌렸기 때문에 포스트의 개수만큼 콘솔이 찍힌다.\n          // console.log(\"MMM2\", state.post);\n          // 각 컨텐츠의 id가 디스패치를 통해 받은 값의 id와 같지 않다면\n          if (item.id !== action.post.id) {\n            // item을 리턴 item은 객체 하나하나를 담은 값\n            return item;\n          } // 아니라면\n\n\n          return { ...state.list,\n            ...action.post\n          };\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Users/HANSUNG/Desktop/React/study/src/redux/modules/post.js"],"names":["initailState","list","CREATE","LOAD","DELETE","EDIT","createPost","post","type","loadPost","deletePost","id","editPost","reducer","state","action","console","log","arr","filter","d","map","item"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AADa,CAArB,C,CAIA;;AACA,MAAMC,MAAM,GAAG,aAAf;AACA,MAAMC,IAAI,GAAG,WAAb;AACA,MAAMC,MAAM,GAAG,aAAf;AACA,MAAMC,IAAI,GAAG,WAAb,C,CAEA;;AAEA,OAAO,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,SAAO;AAAEC,IAAAA,IAAI,EAAEN,MAAR;AAAgBK,IAAAA;AAAhB,GAAP;AACD;AACD,OAAO,SAASE,QAAT,CAAkBF,IAAlB,EAAwB;AAC7B,SAAO;AAAEC,IAAAA,IAAI,EAAEL,IAAR;AAAcI,IAAAA;AAAd,GAAP;AACD;AACD,OAAO,SAASG,UAAT,CAAoBC,EAApB,EAAwB;AAC7B,SAAO;AAAEH,IAAAA,IAAI,EAAEJ,MAAR;AAAgBO,IAAAA;AAAhB,GAAP;AACD;AACD,OAAO,SAASC,QAAT,CAAkBL,IAAlB,EAAwB;AAC7B,SAAO;AAAEC,IAAAA,IAAI,EAAEH,IAAR;AAAcE,IAAAA;AAAd,GAAP;AACD,C,CAED;;AACA,eAAe,SAASM,OAAT,CAAiBC,KAAK,GAAGd,YAAzB,EAAuCe,MAAM,GAAG,EAAhD,EAAoD;AACjE,UAAQA,MAAM,CAACP,IAAf;AACE,SAAK,aAAL;AAAoB;AAClB,eAAO;AAAEP,UAAAA,IAAI,EAAE,CAAC,GAAGa,KAAK,CAACb,IAAV,EAAgBc,MAAM,CAACR,IAAvB;AAAR,SAAP;AACD;;AACD,SAAK,WAAL;AAAkB;AAChB,eAAO;AAAEN,UAAAA,IAAI,EAAE,CAACc,MAAM,CAACR,IAAR;AAAR,SAAP;AACD;;AACD,SAAK,aAAL;AAAoB;AAClB;AACAS,QAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBF,MAAjB;AACA,cAAMG,GAAG,GAAGJ,KAAK,CAACb,IAAN,CAAWkB,MAAX,CAAmBC,CAAD,IAAOA,CAAC,CAACT,EAAF,KAASI,MAAM,CAACJ,EAAzC,CAAZ;AACA,eAAO;AAAEV,UAAAA,IAAI,EAAEiB;AAAR,SAAP;AACD;;AACD,SAAK,WAAL;AAAkB;AAChBF,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBH,KAApB;AACAA,QAAAA,KAAK,CAACb,IAAN,CAAWoB,GAAX,CAAgBC,IAAD,IAAU;AACvB;AACA;AACA;AACA,cAAIA,IAAI,CAACX,EAAL,KAAYI,MAAM,CAACR,IAAP,CAAYI,EAA5B,EAAgC;AAC9B;AACA,mBAAOW,IAAP;AACD,WAPsB,CASvB;;;AACA,iBAAO,EACL,GAAGR,KAAK,CAACb,IADJ;AAEL,eAAGc,MAAM,CAACR;AAFL,WAAP;AAID,SAdD;AAeD;;AACD;AACE,aAAOO,KAAP;AAhCJ;AAkCD","sourcesContent":["//초기값\r\nconst initailState = {\r\n  list: [],\r\n};\r\n\r\n//액션\r\nconst CREATE = \"post/CREATE\";\r\nconst LOAD = \"post/LOAD\";\r\nconst DELETE = \"post/DELETE\";\r\nconst EDIT = \"post/EDIT\";\r\n\r\n//액션크리에이터\r\n\r\nexport function createPost(post) {\r\n  return { type: CREATE, post };\r\n}\r\nexport function loadPost(post) {\r\n  return { type: LOAD, post };\r\n}\r\nexport function deletePost(id) {\r\n  return { type: DELETE, id };\r\n}\r\nexport function editPost(post) {\r\n  return { type: EDIT, post };\r\n}\r\n\r\n//리듀서\r\nexport default function reducer(state = initailState, action = {}) {\r\n  switch (action.type) {\r\n    case \"post/CREATE\": {\r\n      return { list: [...state.list, action.post] };\r\n    }\r\n    case \"post/LOAD\": {\r\n      return { list: [action.post] };\r\n    }\r\n    case \"post/DELETE\": {\r\n      //   let idx = state.list.findIndex((d) => d.id === action.post);\r\n      console.log(\"하\", action);\r\n      const arr = state.list.filter((d) => d.id !== action.id);\r\n      return { list: arr };\r\n    }\r\n    case \"post/EDIT\": {\r\n      console.log(\"수정하기\", state);\r\n      state.list.map((item) => {\r\n        // map으로 돌렸기 때문에 포스트의 개수만큼 콘솔이 찍힌다.\r\n        // console.log(\"MMM2\", state.post);\r\n        // 각 컨텐츠의 id가 디스패치를 통해 받은 값의 id와 같지 않다면\r\n        if (item.id !== action.post.id) {\r\n          // item을 리턴 item은 객체 하나하나를 담은 값\r\n          return item;\r\n        }\r\n\r\n        // 아니라면\r\n        return {\r\n          ...state.list,\r\n          ...action.post,\r\n        };\r\n      });\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}